Cisco Live Cancun UCS Python SDK Workshop
Connect / Query / Filter / Dump XML
from ucsmsdk.ucshandle import UcsHandle
handle = UcsHandle("198.18.133.91","admin","C1sco12345")
handle.login()
handle.cookie

blades = handle.query_classid("ComputeBlade")
len(blades)

for blade in blades:
    print blade.dn, blade.serial, blade.model

handle.set_dump_xml()
blades = handle.query_classid("ComputeBlade")

filter_exp='(model,"UCSB-B200-M4")'
blades = handle.query_classid("ComputeBlade",filter_str=filter_exp)
len(blades)

filter_exp='(model,"UCSB-B200-M4", type="eq")'
blades = handle.query_classid("ComputeBlade",filter_str=filter_exp)
len(blades)

filter_exp='(model,"ucsB-B200-m4", flag="I")'
blades = handle.query_classid("ComputeBlade",filter_str=filter_exp)
len(blades)
handle.unset_dump_xml()

for blade in blades:
        print blade.dn

blade_by_dn = handle.query_dn("sys/chassis-1/blade-2")
print blade_by_dn

blades_and_chassis = handle.query_classids("ComputeBlade","EquipmentChassis")
print blades_and_chassis
print blades_and_chassis['ComputeBlade']

for blade in blades_and_chassis['ComputeBlade']:
    print blade.dn
for chassis in blades_and_chassis['EquipmentChassis']:
    print chassis.dn

blade_and_chassis = handle.query_dns("sys/chassis-1/blade-1","sys/chassis-1")
print blade_and_chassis
print blade_and_chassis['sys/chassis-1/blade-1'].dn

handle.logout()

Get Help / Variable Inspection / Metadata

vars(handle)
dir(UcsHandle)
help(UcsHandle)

from ucsmsdk.ucscoreutils import get_meta_info
meta = get_meta_info(class_id="FabricVlan")
print meta

meta = get_meta_info(class_id="FabricVlan", include_prop=False, show_tree=False)
print meta

meta = get_meta_info(class_id="FabricVlan", include_prop=False, show_tree=True)
print meta

Configure

from ucsmsdk.ucshandle import UcsHandle
from ucsmsdk.mometa.fabric.FabricVlan import FabricVlan
handle = UcsHandle("198.18.133.91", "admin", "password")
handle.login()

fabric_lan_cloud = handle.query_classid("FabricLanCloud")
vlan = FabricVlan(parent_mo_or_dn=fabric_lan_cloud[0], sharing="none",
    name="vlan100", id="100", mcast_policy_name="",
    policy_owner="local", default_net="no", pub_nw_name="",
    compression_type="included")

handle.add_mo(vlan)
handle.commit()
handle.logout()

Transactions

from ucsmsdk.ucshandle import UcsHandle
from ucsmsdk.mometa.fabric.FabricVlan import FabricVlan
handle = UcsHandle("198.18.133.91", "admin", "password")
handle.login()

fabric_lan_cloud = handle.query_classid("FabricLanCloud")
vlans = ['200','300']

for vlan in vlans:
    vlan = FabricVlan(parent_mo_or_dn=fabric_lan_cloud[0], sharing="none",
                      name="vlan" + vlan, id=vlan, mcast_policy_name="",
                      policy_owner="local", default_net="no", pub_nw_name="",
                      compression_type="included")
    handle.add_mo(vlan)

handle.commit()
handle.logout()

Compare / Sync

from ucsmsdk.ucshandle import UcsHandle
from ucsmsdk.utils import comparesyncmo
source_ucs=UcsHandle("198.18.133.91", "admin", "password")
target_ucs=UcsHandle("198.18.134.249", "admin", "password")
source_ucs.login()
target_ucs.login() 

source_ucs_vlans=source_ucs.query_classid("fabricVlan") 
target_ucs_vlans=target_ucs.query_classid("fabricVlan")

difference_vlans=comparesyncmo.compare_ucs_mo(target_ucs_vlans, source_ucs_vlans)
# print the difference to the console
comparesyncmo.write_mo_diff(difference_vlans)

comparesyncmo.sync_ucs_mo(target_ucs, difference_vlans, delete_not_present=True)

source_ucs.logout()
target_ucs.logout()

Code Generation

from ucsmsdk.utils.converttopython import convert_to_ucs_pythonconvert_to_ucs_python(xml=True, literal_path="C:\\Users\\demouser\\Downloads\\vlan_ops_xmlReq.log")

